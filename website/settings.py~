# Django settings for exercita project.
import os

ROOT_PATH = os.path.dirname(__file__)

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'exercita',                      # Or path to database file if using sqlite3.
        'USER': 'exercita',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    },
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/Madrid'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'es-es'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
#MEDIA_URL = 'http://static.exercita.local/media/'

MEDIA_URL = '/static/media/'

# Absolute path to the directory that holds static files.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(ROOT_PATH,'../static/media/')

# URL that handles the static files served from STATIC_ROOT.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin media -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

#NEXUS_MEDIA_PREFIX = '/admin/media/'
#ADMIN_MEDIA_PREFIX = 'http://static.exercita.local/admin/'
# A list of locations of additional static files
STATICFILES_DIRS = (os.path.join(ROOT_PATH,'/static/'))

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'qdz5wj39hb-)tdxfg%cg1r_4c%*^!a559k1mx6de-=#vj^97cu'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'djinja.template.loaders.Loader',
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    #'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'djinja.utilities.context_processors.request_path',
)

AUTHENTICATION_BACKENDS = (
    # 'social_auth.backends.google.GoogleBackend',
    'authbackend.UCMBackend',
    'django.contrib.auth.backends.ModelBackend',
)

MIDDLEWARE_CLASSES = (
    'mediagenerator.middleware.MediaMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

ROOT_URLCONF = 'website.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(ROOT_PATH,'templates'),
)

INSTALLED_APPS = (
    #'jinja2',
    #'coffin',
    'website',
    #'nexus',
    'documents',
    'exercises',
    #'coffin.contrib.markup',
    'djinja.utilities',
    'mediagenerator',
    
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    #'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    'djinja.contrib.admin',
    'django.contrib.admin',
    'social_auth',
    'haystack',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request':{
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

MEDIA_BUNDLES = (
    ('css/all.css',
        'css/960.css',
        'css/reset.css',
        'css/text.css',
        'css/fonts.css',
        'css/header.css',
        'css/main.css',
        'css/documents.css',
        'css/exercises.css'
    ),
    ('scripts/joined.js',
        'scripts/jquery.ba-hashchange.min.js',
        'scripts/jquery.cycle.min.js',
        'scripts/jquery.waypoints.min.js',
    ),
    #('js/page.js',
    #    'js/jquery.tweet.js'
    #),
)

GLOBAL_MEDIA_DIRS = (
    os.path.join(ROOT_PATH,'../static/media'),
)


MEDIA_DEV_MODE = True
DEV_MEDIA_URL = '/devmedia/'
PRODUCTION_MEDIA_URL = 'http://static.exercita.local/'

YUICOMPRESSOR_PATH = os.path.join(
    os.path.dirname(ROOT_PATH), 'yuicompressor-2.4.6.jar')
if os.path.exists(YUICOMPRESSOR_PATH):
    ROOT_MEDIA_FILTERS = {
        'js': 'mediagenerator.filters.yuicompressor.YUICompressor',
        'css': 'mediagenerator.filters.yuicompressor.YUICompressor',
    }


JINJA2_ENVIRONMENT_OPTIONS = {
    'autoescape': False,
}
JINJA2_EXTENSIONS = (
    'mediagenerator.contrib.jinja2ext.MediaExtension',
    'pyjade.ext.jinja.PyJadeExtension',
)

EXERCITA = {
    'PATH' : '/usr/share/exercita/',
    'DATABASE': '/Users/syrus/Proyectos/exercita/exercita-db',
    'DOCUMENTS': os.path.join(ROOT_PATH,'../static/documents/'),
    'TEXINPUTS':[],
}
SENDFILE_BACKEND = 'sendfile.backends.simple'
SENDFILE_ROOT =  os.path.join(ROOT_PATH,'../')
#from django.template.defaultfilters import slugify
#SOCIAL_AUTH_USERNAME_FIXER = lambda u: slugify(u)

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',
        'INDEX_NAME': 'exercita',
    },
    # 'whoosh': {
    #     'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
    #     'PATH': os.path.join(ROOT_PATH,'../search/whoosh_index'),
    #     'STORAGE': 'file',
    #     'INCLUDE_SPELLING': True,
    #     'BATCH_SIZE': 100,
    # },
}

try:
    from local_settings import *
except ImportError:
    pass
